type Query {
  movies(filter: MoviesFilter): Movies
  moviesByIds(ids: [Int]): [Movie]
  genres: [Genre]
  search(queryStr: SearchFilter): Movies
  getSingleMovie(id: Int!): Movie!
  getTrailers(id: Int!): Trailers
}

input MoviesFilter {
  page: Int
  sortBy: String
  sortDirection: SORT_DIRECTION
  includeAdult: Boolean
  primaryReleaseYear: Int
  genre: Int
}

input SearchFilter {
  page: Int
  query: String
  includeAdult: Boolean
}

enum SORT_DIRECTION {
  desc
  asc
}

type Movies {
  page: Int!
  totalResults: Int!
  totalPages: Int!
  results: [Movie!]!
}

type Movie {
  id: ID!
  title: String!
  originalTitle: String
  releaseDate(format: String): String!
  posterPath: String
  genres: [Genre]
  adult: Boolean
  overview: String!
  originalLanguage: String
  tagline: String!
  backdropPath: String
  popularity: Float
  voteCount: Int
  video: Boolean
  voteAverage: Float
  runtime: Int!
}

type Genre {
  id: Int!
  name: String
}

type Trailers {
  id: Int!
  results: [Trailer!]!
}

type Trailer {
  key: String!
  name: String!
  type: String
}
